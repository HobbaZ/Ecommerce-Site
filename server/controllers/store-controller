const Store = require("../models/Store");
const User = require("../models/User");
const Auth = require("../utils/auth");

module.exports = {
  //Get all stores
  async allStores(req, res) {
    const storeData = await Store.find();
    if (!storeData) {
      return res.status(400).json({ message: "Can't find all stores!" });
    }
    res.status(200).json({ message: "found all stores" });
  },

  // Delete a user
  async getSingleStore(req, res) {
    const getstore = await Store.findById(req.params.id);
    if (!getstore) {
      return res.status(400).json({ message: "Error with getting the store" });
    }
    res.json("Found the store", getstore);
  },

  //Create a store
  async createStore({ user, body }, res) {
    try {
      const createstore = await Store.create(body);
      console.log("Store variables are ", createstore, "user is ", user);
      if (!createstore) {
        return res.status(404).json({ message: "Error in creating store" });
      }
      const updatedUser = await User.findOneAndUpdate(
        { _id: user._id },
        { $push: { stores: createstore } },
        { new: true }
      );
      if (!updatedUser) {
        return res.status(404).json({ message: "No user with that ID" });
      }
      return res.status(200).json({
        message: `Created the store, ${createstore.name}`,
        createstore,
      });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  /* async updatestore(req, res) {
    const updatestore = Store.findByIdAndUpdate(
      { _id: req.params.id },
      { $et: req.body },
      { new: true }
    );
    if (!updatestore) {
      return res.status(400).json({ message: "Error with updating the store" });
    }
    res.json("Updated the store", updatestore);
  },*/

  //Add product to store
  addProduct(req, res) {
    Store.findOneAndUpdate(
      //add reaction to product
      { _id: req.params.productId },
      { $push: { products: req.body } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `added a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error adding product", err })
      );
  },

  //delete product from store
  deleteProduct(req, res) {
    Store.findOneAndUpdate(
      //add reaction to product
      { _id: req.params.productId },
      { $pull: { products: { _id: req.params.productId } } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `removed a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error removingg product", err })
      );
  },

  /* async deleteStore(req, res) {
    const deletestore = Store.findByIdAndDelete(
      { _id: req.params.id },
      { $pull: { products: { _id: req.params.productId } } },
      { new: true }
    );
    if (!deletestore) {
      return res.status(400).json({ message: "Error with deleting the store" });
    }
    res.json("Deleted the store", deletestore);
  },*/
};
