// import user model
const { User } = require("../models/User");
// import sign token function from auth
const { signToken } = require("../utils/auth");

module.exports = {
  // get a single user by either their id or their username
  async getSingleUser({ user = null, params }, res) {
    const foundUser = await User.findOne({
      $or: [
        { _id: user ? user._id : params.id },
        { username: params.username },
      ],
    });

    if (!foundUser) {
      return res
        .status(400)
        .json({ message: "Cannot find a user with this id!" });
    }

    res.json(foundUser);
  },
  // create a user, sign a token, and send it back (to client/src/components/SignUpForm.js)
  async createUser(req, res) {
    const { username, firstname, lastname, email, password } = req.body;
    const user = await User.create(req.body);

    if (!username || !firstname || !lastname || !email || !password) {
      return res.status(400).json({ message: "Please fill in asll fields" });
    }

    if (!user) {
      return res.status(400).json({ message: "Something is wrong!" });
    }

    //send verification email if email exists
    /*User.findOne({email}).then(user => {
    if(user) {
        return res.status(400).json({message: 'An error with signup has occured'});
    } 
})*/

    const token = signToken(user);
    res.json({ token, user });
  },
  // login a user, sign a token, and send it back (to client/src/components/LoginForm.js)
  // {body} is destructured req.body
  async login({ body }, res) {
    const { email, password } = req.body;
    const user = await User.findOne({
      $or: [{ username: body.username }, { email: body.email }],
    });

    if (!email || !password) {
      res.status(400).json({ message: "Please enter all fields" });
    }

    if (!user) {
      return res.status(400).json({ message: "Can't find this user" });
    }

    const correctPw = await user.isCorrectPassword(body.password);

    if (!correctPw) {
      return res
        .status(400)
        .json({ message: "Wrong password or email entered!" });
    }
    const token = signToken(user);
    res.json({ token, user });
  },

  // Update a user
  async updateUser({ body }, res) {
    try {
      const user = await User.findOneAndUpdate(
        { _id: user._id },
        { $addToSet: body },
        { new: true, runValidators: true }
      );
      if (!user) {
        return res.status(400).json({ message: "Couldn't update user!" });
      }
      return res.json({ message: "updated user", user });
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },

  // save a product to a user's `savedProducts` field by adding it to the set (to prevent duplicates)
  // user comes from `req.user` created in the auth middleware function
  async saveProduct({ user, body }, res) {
    console.log(user);
    try {
      const updatedUser = await User.findOneAndUpdate(
        { _id: user._id },
        { $addToSet: { savedProduct: body } },
        { new: true, runValidators: true }
      );
      return res.json(updatedUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },
  // remove a book from `savedProducts`
  async deleteProduct({ user, params }, res) {
    const updatedUser = await User.findOneAndUpdate(
      { _id: user._id },
      { $pull: { savedProducts: { _id: params.id } } },
      { new: true }
    );
    if (!updatedUser) {
      return res
        .status(404)
        .json({ message: "Couldn't find user with this id!" });
    }
    return res.json(updatedUser);
  },
};
