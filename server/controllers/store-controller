const Store = require("../models/Store");
const User = require("../models/User");

module.exports = {
  //Get all stores
  async allStores(req, res) {
    try {
      const storeData = await Store.find();

      if (!storeData) {
        return res.status(400).json({ message: "Can't find all stores!" });
      }
      res.status(200).json({ message: "found all stores", storeData });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error finding all stores", err });
    }
  },

  // Find single store
  async getSingleStore(req, res) {
    try {
      const store = await Store.findById(req.params.id);
      if (!store) {
        return res
          .status(400)
          .json({ message: "Error with getting the store" });
      }
      res.json({ message: "Found the store", store });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error finding a store", err });
    }
  },

  //Create a store
  async createStore(req, res) {
    try {
      const createstore = await Store.create({
        storeName: req.body.storeName,
        storeDescription: req.body.storeDescription,
        storeOwner: req.body.storeOwner,
        storeImage: req.body.storeImage,
        storeRating: req.body.storeRating,
      });
      console.log("Store variables are ", createstore);
      if (!createstore) {
        return res
          .status(404)
          .json({ message: "Error in creating store", createstore });
      }

      const updatedUser = await User.findOneAndUpdate(
        { _id: req.body.storeOwner },
        { $push: { stores: createstore } },
        { new: true }
      );
      if (!updatedUser) {
        return res.status(404).json({ message: "No user with that ID" });
      }

      console.log(
        `Created the store, ${createstore.storeName}`,
        createstore,
        "user has been updated",
        updatedUser
      );
      return res.status(200).json({
        message: `Created the store, ${createstore.storeName}`,
        createstore,
        updatedUser,
      });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  //update a store
  async updateStore(req, res) {
    try {
      const updateStore = await Store.findByIdAndUpdate(
        req.params.id,
        req.body,
        { new: true, runValidators: true }
      );

      if (!updateStore) {
        return res.status(400).json({ message: "Store not found" });
      }

      return res.status(200).json(updateStore);
    } catch (err) {
      console.error(err);
      return res
        .status(500)
        .json({ message: "Error updating store", error: err });
    }
  },

  // Delete a store
  async deleteStore(req, res) {
    try {
      const deleteStore = await Store.findByIdAndDelete({ _id: req.params.id });

      if (!deleteStore) {
        return res.status(400).json({ message: "Error deleting the store!" });
      }

      // delete all products of the store
      await Product.deleteMany({ store: deleteStore._id });

      res.status(200).json(deleteStore);

      const updatedUser = await User.findOneAndUpdate(
        { _id: storeOwner },
        { $pull: { stores: deleteStore._id } },
        { new: true }
      );
      if (!updatedUser) {
        console.log("No user with that ID");
        return res.status(400).json({ message: "No user with that ID" });
      }

      console.log("Store has been deleted user has been updated", updatedUser);
      return res.status(200).json({
        message: `Deleted the store`,
        updatedUser,
      });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error deleting the store", err });
    }
  },
};
