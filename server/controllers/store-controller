const Store = require("../models/Store");
const User = require("../models/User");
const Auth = require("../utils/auth");

module.exports = {
  //Get all stores
  async allStores(req, res) {
    const storeData = await Store.find();
    if (!storeData) {
      return res.status(400).json({ message: "Can't find all stores!" });
    }
    res.status(200).json({ message: "found all stores" });
  },

  // Delete a user
  async getSingleStore(req, res) {
    const id = req.params._id;
    const getAllstores = await Store.findOne(id);
    if (!getAllstores) {
      return res.status(400).json({ message: "Error with getting the store" });
    }
    res.json({ message: "Found the store", store: getAllstores });
  },

  //Create a store
  async createStore(req, res) {
    try {
      const createstore = await Store.create({
        storeName: req.body.storeName,
        storeDescription: req.body.storeDescription,
        storeOwner: req.body.storeOwner,
        storeImage: req.body.storeImage,
        storeRating: req.body.storeRating,
      });
      console.log(
        "Store variables are ",
        createstore,
        " user is ",
        req.body.storeOwner
      );
      if (!createstore) {
        return res
          .status(404)
          .json({ message: "Error in creating store", createstore });
      }
      const updatedUser = await User.findOneAndUpdate(
        { _id: req.body.storeOwner },
        { $push: { stores: createstore } },
        { new: true }
      );
      if (!updatedUser) {
        return res.status(404).json({ message: "No user with that ID" });
      }
      return res.status(200).json({
        message: `Created the store, ${createstore.storeName}`,
        createstore,
      });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  //Add product to store
  addProduct(req, res) {
    Store.findOneAndUpdate(
      //add reaction to product
      { _id: req.params.storeId },
      { $push: { products: req.body } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `added a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error adding product", err })
      );
  },

  //delete product from store
  deleteProduct(req, res) {
    Store.findOneAndUpdate(
      //add reaction to product
      { _id: req.params.storeId },
      { $pull: { products: { _id: req.params.productId } } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `removed a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error removing product", err })
      );
  },
};
