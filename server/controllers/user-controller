// import sign token function from auth
const { signToken } = require("../utils/auth");
const { Product, User, Store, Cart } = require("../models");

module.exports = {
  //Get all products
  async allUsers(req, res) {
    const userData = await User.find();

    if (!userData) {
      return res.status(400).json({ message: "Can't find all users!" });
    }

    res.status(200).json({ message: "found all users", userData });
  },

  // get a single user by either their id or their username
  async getSingleUser(req, res) {
    const singleUser = await User.findOne({
      _id: req.user._id,
    });

    if (!singleUser) {
      return res
        .status(400)
        .json({ message: "Cannot find a user with this id!" });
    }

    res.json(singleUser);
  },

  // create a user, sign a token
  async createUser(req, res) {
    try {
      const user = await User.create({
        username: req.body.username,
        name: req.body.name,
        email: req.body.email,
        password: req.body.password,
      });

      if (!user) {
        return res.status(400).json({ message: "Couldn't create user!" });
      }
      const token = signToken(user);
      res.json({ message: "Created user", token, user });
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },

  // login a user, sign a token, and send it back
  async login(req, res) {
    try {
      const user = await User.findOne({
        $or: [{ username: req.body.username }, { email: req.body.email }],
      });
      if (!user) {
        return res.status(400).json({ message: "Can't find this user" });
      }

      const correctPw = user.isCorrectPassword(req.body.password);

      if (!correctPw) {
        return res
          .status(400)
          .json({ message: "Wrong password or email entered!" });
      }
      const token = signToken(user);
      res.json({ message: "Login successful", token, user });
    } catch (err) {
      console.log(err);
      return res.status(400).json("Can't Login", err);
    }
  },

  // Delete a user
  async deleteUser(req, res) {
    try {
      const delUser = await User.findOneAndDelete({
        _id: req.user._id,
      });

      if (!delUser) {
        return res
          .status(400)
          .json({ message: "Cannot find a user with this id!" });
      }
      res.status(200).json(delUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json("Can't delete user", err);
    }
  },

  // save a product to a user's `savedProducts` field by adding it to the set (to prevent duplicates)
  // user comes from `req.user` created in the auth middleware function
  async saveProduct(req, res) {
    try {
      const updatedUser = await User.findOneAndUpdate(
        { _id: req.user._id },
        { $addToSet: { savedProducts: req.body } },
        { new: true, runValidators: true }
      );
      return res.json(updatedUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },
  // remove a product from `savedProducts`
  async deleteProduct({ params }, req, res) {
    const updatedUser = await User.findOneAndUpdate(
      { _id: req.user._id },
      { $pull: { savedProducts: { _id: params.id } } },
      { new: true }
    );
    if (!updatedUser) {
      return res
        .status(404)
        .json({ message: "Couldn't find user with this id!" });
    }
    return res.json(updatedUser);
  },

  //update user
  async updateUser(req, res) {
    try {
      const updatedUser = await User.findOneAndUpdate(
        { _id: req.user._id },
        { $set: req.body },
        { new: true, runValidators: true }
      );

      if (!updatedUser) {
        return res.status(400).json({ message: "Couldn't update user!" });
      }

      return res.status(200).json({ message: "updated user", updatedUser });
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },
};
