const Store = require("../models/Store");
const User = require("../models/User");
const Auth = require("../utils/auth");

module.exports = {
  //Get all stores
  async allStores(req, res) {
    const storeData = await Store.find();
    if (!storeData) {
      return res.status(400).json({ message: "Can't find all stores!" });
    }
    res.status(200).json({ message: "found all stores", storeData });
  },

  // Delete a user
  async getSingleStore(req, res) {
    try {
      const store = await Store.findById(req.params.id);
      if (!store) {
        return res
          .status(400)
          .json({ message: "Error with getting the store" });
      }
      res.json({ message: "Found the store", store });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  //Create a store
  async createStore(req, res) {
    try {
      const createstore = await Store.create({
        storeName: req.body.storeName,
        storeDescription: req.body.storeDescription,
        storeOwner: req.body.storeOwner,
        storeImage: req.body.storeImage,
        storeRating: req.body.storeRating,
      });
      console.log(
        "Store variables are ",
        createstore,
        " user is ",
        req.body.storeOwner
      );
      if (!createstore) {
        return res
          .status(404)
          .json({ message: "Error in creating store", createstore });
      }

      const updatedUser = await User.findOneAndUpdate(
        { _id: req.body.storeOwner },
        { $push: { stores: createstore._id } },
        { new: true }
      );
      if (!updatedUser) {
        return res.status(404).json({ message: "No user with that ID" });
      }

      console.log(
        `Created the store, ${createstore.storeName}`,
        createstore,
        "user has been updated",
        updatedUser
      );
      return res.status(200).json({
        message: `Created the store, ${createstore.storeName}`,
        createstore,
        updatedUser,
      });
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  //update user
  async updateStore(req, res) {
    try {
      console.log(req.params.id, req.body);
      const updatedUser = await Store.findByIdAndUpdate(
        req.params.id,
        req.body,
        { new: true, runValidators: true }
      );

      if (!updatedUser) {
        return res.status(400).json({ message: "Couldn't update store!" });
      }

      console.log(updatedUser);
      return res.status(200).json(updatedUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error creating a store", err });
    }
  },

  // Delete a store
  async deleteStore(req, res) {
    try {
      const delUser = await Store.findByIdAndDelete(req.params.id);

      if (!delUser) {
        return res.status(400).json({ message: "Error deleting the store!" });
      }
      res.status(200).json(delUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json({ message: "Error deleting the store", err });
    }
  },

  //Add product to store
  addProduct(req, res) {
    Store.findOneAndUpdate(
      //add product to store
      { _id: req.params.id },
      { $push: { products: req.body } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `added a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error adding product", err })
      );
  },

  //delete product from store
  deleteProduct(req, res) {
    Store.findOneAndUpdate(
      //delete product from store
      { _id: req.params.id },
      { $pull: { products: { _id: req.params.productId } } },
      { new: true }
    )
      .then((product) =>
        !product
          ? res.status(404).json({ message: "No store with that id!" })
          : res
              .status(200)
              .json({ message: `removed a product to the store`, product })
      )
      .catch((err) =>
        res.status(400).json({ message: "Error removing product", err })
      );
  },
};
