const Product = require("../models/Product.js");
const User = require("../models/User.js");
const Store = require("../models/Store.js");

module.exports = {
  //Get all products
  async allProducts(req, res) {
    const productData = await Product.find();

    if (!productData) {
      return res.status(400).json({ message: "Can't find all products!" });
    }
    console.log(productData);
    res
      .status(200)
      .json({ message: "found all products", products: productData });
  },

  // Get a single product
  async getSingleProduct(req, res) {
    try {
      const getProduct = await Product.findById(req.params.id);
      console.log(getProduct);
      if (!getProduct) {
        return res
          .status(400)
          .json({ message: "Error with getting the product" });
      }
      res.json({ message: "Found the product", product: getProduct });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Error with getting the product", err });
    }
  },

  //Create a product
  async createProduct(req, res) {
    try {
      const createproduct = await Product.create({
        name: req.body.name,
        description: req.body.description,
        brand: req.body.brand,
        image: req.body.image,
        category: req.body.category,
        price: req.body.price,
        limit: req.body.limit,
        rating: req.body.rating,
        numberinStock: req.body.numberinStock,
        numberOfReviews: req.body.numberOfReviews,
        store: req.body.store,
        date_added: req.body.date_added,
      });

      console.log("Product variables are ", createproduct);

      if (!createproduct) {
        return res
          .status(400)
          .json({ message: "Error with creating the product" });
      }

      const updatedStore = await Store.findOneAndUpdate(
        { _id: req.body.store },
        { $push: { products: createproduct } },
        { new: true }
      );

      console.log(
        `Created the product, ${createproduct.name}`,
        createproduct,

        "store has been updated",
        updatedStore
      );

      if (!updatedStore) {
        return res.status(400).json({ message: "No store with that ID" });
      }

      res.status(200).json({
        message: "Created the product",
        product: createproduct,
        updatedStore,
      });
    } catch (err) {
      console.log(err);
      return res.status(500).json({ message: "Error creating a product", err });
    }
  },

  async updateProduct(req, res) {
    try {
      const updateproduct = await Product.findByIdAndUpdate(
        { _id: req.params.id },
        { $set: req.body },
        { new: true, runValidators: true }
      );
      if (!updateproduct) {
        return res
          .status(400)
          .json({ message: "Error with updating the product" });
      }
      res
        .status(200)
        .json({ message: "Updated the product", product: updateproduct });
      console.log("_id:", req.params.id);
    } catch (err) {
      console.log(err);
      return res
        .status(400)
        .json({ message: "Error updating the product", err });
    }
  },

  async deleteProduct(req, res) {
    try {
      const deleteproduct = await Product.findByIdAndDelete(
        { _id: req.params.id.toString() },
        { new: true, runValidators: true }
      );

      if (!deleteproduct) {
        return res
          .status(400)
          .json({ message: "Error deleting the product, no product Id" });
      }

      const updatedStore = await Store.findOneAndUpdate(
        { _id: req.body.store },
        { $pull: { products: deleteproduct } },
        { new: true }
      );

      if (!updatedStore) {
        return res.status(400).json({ message: "No store with that ID" });
      }

      res.status(200).json("Deleted the product", deleteproduct);
      console.log("Deleted the product ,store has been updated", updatedStore);
    } catch (err) {
      console.log(err);
      console.log("_id:", req.params.id);
      return res
        .status(400)
        .json({ message: "Error deleting the product", err });
    }
  },
};
