// import user model
const { User } = require("../models/User");
// import sign token function from auth
const { signToken } = require("../utils/auth");

module.exports = {
  // get a single user by either their id or their username
  // get a single user by either their id or their username
  async getSingleUser({ user = null, params }, res) {
    const singleUser = await User.findOne({
      $or: [
        { _id: user ? user._id : params.id },
        { username: params.username },
      ],
    });

    if (!singleUser) {
      return res
        .status(400)
        .json({ message: "Cannot find a user with this id!" });
    }

    res.json(singleUser);
  },
  // create a user, sign a token
  async createUser(req, res) {
    const user = await User.create({
      username: req.body.username,
      firstname: req.body.firstname,
      lastname: req.body.lastname,
      email: req.body.email,
      password: req.body.password,
    });

    if (!user) {
      return res.status(400).json({ message: "Couldn't create user!" });
    }
    const token = signToken(user);
    res.json({ message: "Created user", token, user });
  },
  // login a user, sign a token, and send it back
  async login({ body }, res) {
    const user = await User.findOne({
      $or: [{ username: body.username }, { email: body.email }],
    });
    if (!user) {
      return res.status(400).json({ message: "Can't find this user" });
    }

    const correctPw = user.checkPassword(body.password);

    if (!correctPw) {
      return res
        .status(400)
        .json({ message: "Wrong password or email entered!" });
    }
    const token = signToken(user);
    res.json({ message: "Login successful", token, user });
  },

  // Delete a user
  async deleteUser(req, res) {
    const delUser = await User.destroy({ where: { id: req.params.id } });

    if (!delUser) {
      return res
        .status(400)
        .json({ message: "Cannot find a user with this id!" });
    }

    res.json(delUser);
  },

  // save a product to a user's `savedProducts` field by adding it to the set (to prevent duplicates)
  // user comes from `req.user` created in the auth middleware function
  async saveProduct({ user, body }, res) {
    console.log(user);
    try {
      const updatedUser = await User.findOneAndUpdate(
        { _id: user._id },
        { $addToSet: { savedProduct: body } },
        { new: true, runValidators: true }
      );
      return res.json(updatedUser);
    } catch (err) {
      console.log(err);
      return res.status(400).json(err);
    }
  },
  // remove a book from `savedProducts`
  async deleteProduct({ user, params }, res) {
    const updatedUser = await User.findOneAndUpdate(
      { _id: user._id },
      { $pull: { savedProducts: { _id: params.id } } },
      { new: true }
    );
    if (!updatedUser) {
      return res
        .status(404)
        .json({ message: "Couldn't find user with this id!" });
    }
    return res.json(updatedUser);
  },
};
